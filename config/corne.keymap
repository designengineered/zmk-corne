/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT_L 0
#define SYMBOLS_L 1
#define ARROWS_L  2
#define NUMBERS_L 3

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        a {
            bindings = <&kp GRAVE>;
            key-positions = <2 1>;
        };

        b {
            bindings = <&kp ESCAPE>;
            key-positions = <14 13>;
        };

        c {
            bindings = <&kp TAB>;
            key-positions = <26 25>;
        };

        d {
            bindings = <&kp BACKSPACE>;
            key-positions = <10 9>;
        };

        e {
            bindings = <&kp ENTER>;
            key-positions = <22 21>;
        };

        f {
            bindings = <&kp MINUS>;
            key-positions = <19 20>;
        };

        g {
            bindings = <&kp EQUAL>;
            key-positions = <21 20>;
        };

        h {
            bindings = <&sys_reset>;
            key-positions = <1 29>;
        };

        j {
            bindings = <&sys_reset>;
            key-positions = <30 10>;
        };

        k {
            bindings = <&kp PLUS>;
            key-positions = <19 21>;
        };

        l {
            bindings = <&mt LS(LA(LC(LEFT_GUI))) LA(BACKSPACE)>;
            key-positions = <38 39>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "0";
            bindings = <
&none  &kp Q  &kp W  &kp F      &kp P          &kp B                   &kp J                     &kp L                &kp U      &kp Y    &kp SEMI  &none
&none  &kp A  &kp R  &kp S      &kp T          &kp G                   &kp M                     &kp N                &kp E      &kp I    &kp O     &none
&none  &kp Z  &kp X  &kp C      &kp D          &kp V                   &kp K                     &kp H                &kp COMMA  &kp DOT  &kp FSLH  &none
                     &kp RCTRL  &kp LEFT_META  &mt LEFT_SHIFT SPACE    &mt LEFT_SHIFT BACKSPACE  &mt LEFT_ALT RETURN  &to 1
            >;
        };

        number_layer {
            label = "1";
            bindings = <
&none  &kp N1            &kp N2             &kp N3           &kp N4                 &kp N5                  &kp N6          &kp N7    &kp N8        &kp N9     &kp N0   &none
&none  &kp LT            &kp LEFT_BRACKET   &kp LEFT_BRACE   &kp LEFT_PARENTHESIS   &kp NON_US_BACKSLASH    &kp LEFT_ARROW  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &kp SQT  &none
&none  &kp GREATER_THAN  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &kp PIPE                &kp GRAVE       &none     &none         &none      &none    &none
                                            &to 0            &none                  &none                   &trans          &trans    &to 2
            >;
        };

        bt_layer {
            label = "2";
            bindings = <
&kp ESC       &kp LS(N1)    &kp LS(N2)      &kp LS(N3)    &kp LS(N4)    &kp LS(N5)     &kp LS(N6)  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)   &kp LS(N0)  &none
&none         &bootloader   &kp LEFT_ARROW  &kp DEL       &kp RIGHT     &bt BT_CLR     &none       &none       &none       &bootloader  &none       &none
&bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2    &bt BT_SEL 1  &bt BT_SEL 0  &bootloader    &none       &none       &none       &none        &none       &none
                                            &to 0         &none         &none          &none       &none       &to 1
            >;
        };
    };
};
